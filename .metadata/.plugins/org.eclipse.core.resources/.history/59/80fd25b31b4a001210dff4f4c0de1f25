package uk.ac.cam.cl.ss958.SpringBoardSimulation;

import uk.ac.cam.cl.ss958.IntegerGeometry.*;

import java.util.ArrayList;
import java.util.Random;

public class SimulationModel {	
	class UserInSpace {
		final public User user;
		final public Point location;
		
		UserInSpace(User user, Point location) {
			this.user = user;
			this.location = location;
		}
	}

	public static final int USER_RADIUS = 10;

	final Random generator = new Random (System.currentTimeMillis());
	
	private int width;
	private int height;

	private int selectedUser;
	private Point selectedUserClickTranslation;
	private ArrayList<UserInSpace> users;
	
	
	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}
	
	SimulationModel(int width, int height) {
		this.width = width;
		this.height = height;
		users = new ArrayList<UserInSpace>();
		selectedUser = -1;
	}
	
	public ArrayList<UserInSpace> getUsers() {
		return users;
	}
	
	boolean ValidatePosition(Point x, int excludingIndex) {
		if (x.getX() <= USER_RADIUS || 
		    x.getX() >= width-USER_RADIUS ||
		    x.getY() <= USER_RADIUS ||
		    x.getY() >= height - USER_RADIUS) return false;
		for (int i = 0; i < users.size(); ++i) {
			if(i != excludingIndex && Compute.euclideanDistanceSquared(x, users.get(i).location) <= Compute.square(2*USER_RADIUS)) {
				return false;
			}
		}
		return true;
	}
	
	public boolean AddUserAtRandomLocation(User user) {
		int retries = 5;
		while(retries-- >= 0) {
			Point location = new Point(generator.nextInt(width), generator.nextInt(height));
			if(ValidatePosition(location, -1)) {
				users.add(new UserInSpace(user, location));
				return true;
			}
		}
		return false;
	}

	public void maybeSelectUser(Point p) {
		for(int i=0; i<users.size(); ++i) {
			if(Compute.euclideanDistanceSquared(p, users.get(i).location) <= Compute.square(USER_RADIUS)) {
				selectedUserClickTranslation = users.get(i).location.sub(p);
				selectedUser = i;
			}
		}
		selectedUser = -1;
	}
	
	public void moveUser(int index, Point p) {
		if (selectedUser != -1) {
			users.get(selectedUser).location = p.add(selectedUserClickTranslation);
		}
	}
}
